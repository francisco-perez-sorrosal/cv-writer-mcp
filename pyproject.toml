[project]
name = "cv-writer-mcp"
version = "0.1.0"
description = "MCP server for converting markdown CV content to LaTeX and compiling to PDF"
authors = [
    {name = "Francisco Perez-Sorrosal", email = "fperezsorrosal@gmail.com"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">= 3.11"
dependencies = [
    "mcp>=1.0.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    "typer>=0.9.0",
    "rich>=13.0.0",
    "python-dotenv>=1.0.0",
    "openai>=1.0.0", 
    "openai-agents>=0.3.0",
    "pyyaml>=6.0.0", "playwright>=1.55.0,<2",
]


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["osx-arm64"]

[tool.pixi.dependencies]
ruff = "*"
black = "*"
mypy = "*"
pytest = "*"
pytest-asyncio = "*"
pytest-cov = "*"
playwright = ">=1.55.1,<2"

[tool.pixi.pypi-dependencies]
cv-writer-mcp = { path = ".", editable = true }

[tool.pixi.tasks]
install = "pip install -e ."

# Development commands
dev = "python -m cv_writer_mcp start --dev"
test = "pytest tests/ -v"
test-cov = "pytest --cov=src --cov-report=html tests/"
lint = "ruff check src/ tests/"
lint-fix = "ruff check --fix src/ tests/"
format = "black src/ tests/"
type-check = "mypy src/"
ci = { depends-on = ["format", "lint", "type-check", "test"] }

# MCP main commands
serve = "python -m cv_writer_mcp start-mcps"

# Partial workflow exercised by commands
check-latex = "python -m cv_writer_mcp check-latex"
convert-markdown = "python -m cv_writer_mcp convert-markdown --debug input/schwab_cv_tailoring.md --output my_cv_schwab.tex --template moderncv_template.tex"
compile-latex = "python -m cv_writer_mcp compile-latex --debug output/my_cv_schwab.tex --output my_cv_schwab.pdf"
fix-style = "python -m cv_writer_mcp fix-style -p output/to_improve_schwab.pdf -t output/to_improve_schwab.tex -o to_improve_schwab_fixed.tex --debug"


[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "markdown.*",
    "jinja2.*",
    "pylatex.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
build_command = "pip install build && python -m build"
upload_to_vcs_release = true
upload_to_pypi = false
upload_to_release = true
commit_subject = "chore(release): {version} [skip ci]"
commit_message = "chore(release): {version} [skip ci]\n\nAutomatically generated by python-semantic-release"
tag_commit = true
major_on_zero = true
